" TODO
" figure out statusline
" use %{fugitive#statusline()} for git info
"
" http://code.google.com/p/conque/  A shell in a VIM buffer
" http://www.vim.org/scripts/script.php?script_id=273  buffer to list tags
" https://github.com/ervandew/supertab  TAB insert mode completion
" https://github.com/tsaleh/vim-align  would I use this?
" :set complete=.,t   "limit complete to current file and ctags
" map <Leader>rt :!ctags --extra=+f --exclude=.git --exclude=log -R * `rvm gemdir`/gems/*<CR><CR>  "include gems in tags

call pathogen#infect()
call pathogen#helptags()

set nocompatible
runtime macros/matchit.vim
" preserve default comma behavior as backslash (reverse of f,t search)
map \ ,
let mapleader = ","

set number
set ruler
set autoread
syntax on

" LustyExplorer finesse
map <Leader>f :LustyFilesystemExplorer<CR>
map <Leader>r :LustyFilesystemExplorerFromHere<CR>
map <Leader>b :LustyBufferExplorer<CR>
map <Leader>g :LustyBufferGrep<CR>
map <Leader>j :LustyJuggler<CR>

let g:LustyJugglerShowKeys = 'a'
let g:LustyJugglerAltTabMode = 1
noremap <silent> <A-TAB> :LustyJuggler<CR>
let g:LustyJugglerSuppressRubyWarning = 1

set nobackup
set noswapfile
set bufhidden "delete"
"set hidden

map <Space> <PageDown>

" easier window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" gf opens in tab
nnoremap gf <C-W>gf
" e opens new tab
cab      e  tabe

set cursorline
 
" Whitespace stuff
set nowrap
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Use mac system cliboard by Default
set clipboard=unnamed

set cpoptions+=$ "visual indicator of end of edit area
"set virtualedit=onemore "see h 'virtualedit'     

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Hopefully a temporary mapping to deal with TFS write-only files
" map <Leader>q :!tf checkout %<CR>
au BufWritePre * :if &readonly | !tf co <afile>

" Ack needs easy access
"nnoremap <leader>a :Ack 
map <leader>a :tabnew<CR>:Ack<space>
vmap <leader>a "hy:tabnew<CR>:Ack "<C-r>=escape(@h,'./"*()[]')<CR>"

" Execute test in buffer
nnoremap <leader>s :!ruby -rubygems -I app -I test %<CR>

" NERDTree configuration
" let NERDTreeIgnore=['\.rbc$', '\~$']
" map <Leader>n :NERDTreeToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" turn off search highlighting
nmap <silent> <Leader>/ :nohlsearch<CR>
" couldn't get the below working -- reuses existing redraw behavior
"nmap <silent> <C-l> :redraw \| nohlsearch<CR>
"imap <silent> <C-l> <Esc><C-L>a

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

if !exists(":setupWrapping")
function! s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction
endif

function! s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Use modeline overrides
set modeline
set modelines=10

if !exists(":RubyHook")
  function! RubyHook()
      " formats K ri docs without embedded control chars
      setlocal keywordprg=ri\ -T\ -f\ bs 
  endfunction
endif

autocmd FileType ruby,eruby call RubyHook()

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif 

" Default color scheme
"color desert
syntax enable
set background=dark
colorscheme solarized

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

"Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" xterm not recognized right by vim
set term=builtin_ansi

let $MYTODO = '~/Dropbox/todo.taskpaper'

"auto-source this file on save
autocmd! BufWritePost $MYVIMRC source $MYVIMRC

