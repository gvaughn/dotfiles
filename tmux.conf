# TIPS:
# copy-paste mode in tmux
# enter with ctrl-a [
# arrow keys (maybe vim too?) to beginning of selection and hit 'space' (should start highlighting)
# 'enter' copies the highlighted region
# q exits selection mode

# Setting the prefix from C-b to C-a
# START:prefix
set -g prefix C-a
# END:prefix

# Free the original Ctrl-b prefix keybinding
# START:unbind
unbind C-b
# END:unbind

#setting the delay between prefix and command
# START:delay
set -s escape-time 1
# END:delay

# Ensure that we can send Ctrl-A to other apps
# START:bind_prefix
bind C-a send-prefix
# END:bind_prefix

# support OSX copy/paste
set -g default-shell $SHELL
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
# from https://github.com/tmux/tmux/issues/592#issuecomment-296320908
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy" \; display-message "copied to system clipboard"
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi V send -X rectangle-toggle

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send -X copy-pipe "reattach-to-user-namespace pbcopy" \; display-message "copied to system clipboard"

# when you finish a mouse selection, don't cancel the selection. Now you can 'y' or Enter after you lift the mouse
unbind -T copy-mode-vi MouseDragEnd1Pane
# below not doing what I thought it would
# bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "reattach-to-user-namespace pbcopy" \; "copied to system clipboard"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

# allow vim FocusGained events to work
set -g focus-events on

# copy environment vars into new shells
set -g update-environment -r

# Set the base index for windows to 1 instead of 0
# START:index
set -g base-index 1
# END:index

# Set the base index for panes to 1 instead of 0
# START:panes_index
setw -g pane-base-index 1
# END:panes_index

# increase my history lines
set-option -g history-limit 5000

# Reload the file with Prefix r
# START:reload
bind r source-file ~/.tmux.conf \; display "Reloaded!"
# END:reload

# appears to conflict with default rename session
#bind S source-file ~/.tmux/escapes-services

# splitting panes
# START:panesplit
# bind \\ split-window -h -p 30 -c "#{pane_current_path}"
# bind | split-window -h -c "#{pane_current_path}"
# bind - split-window -v -p 30 -c "#{pane_current_path}"
# bind _ split-window -v -c "#{pane_current_path}"
bind \\ split-window -hl 30% -c "#{pane_current_path}"
bind | split-window -hl 50% -c "#{pane_current_path}"
bind - split-window -vl 30% -c "#{pane_current_path}"
bind _ split-window -vl 50% -c "#{pane_current_path}"
# END:panesplit

# moving between panes
# START:paneselect
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# END:paneselect
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# above binding messes with C-\ getting me out of iex
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
# tmux bind-key -T copy-mode-vi C-\ select-pane -l

# Quick pane selection
# START:panetoggle
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
# END:panetoggle

# Pane resizing
# START:paneresize
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# END:paneresize

# mouse support - set to on if you want to use the mouse
set -g mouse on

# Set the default terminal mode to 256color mode
# START:termcolor
# set -g default-terminal "tmux-256color"
set -g default-terminal "screen-256color"
# neovim says to do one of these in :checkhealth
# but they're not working in Terminal/tmux combo for me
# set-option -sa terminal-overrides ',xterm-256color:RGB'
# set-option -ga terminal-overrides ',xterm-256color:Tc'
# END:termcolor

# enable activity alerts
#START:activity
setw -g monitor-activity on
set -g visual-activity on
#END:activity

# set the status line's colors
# START:statuscolor
set -g status-fg white
#set -g status-bg black
#set -g status-bg "#333333"
set -g status-bg colour234
# END:statuscolor

# set the color of the window list
# START:windowstatuscolor
setw -g window-status-fg cyan
setw -g window-status-bg default
setw -g window-status-attr dim
set -g window-status-activity-attr bold
# END:windowstatuscolor

# set colors for the active window
# START:activewindowstatuscolor
setw -g window-status-current-fg white
setw -g window-status-current-bg red
setw -g window-status-current-attr bright
# END:activewindowstatuscolor

# pane colors
# START:panecolors
#set -g pane-border-fg green
set -g pane-border-fg colour245
set -g pane-border-bg black
#set -g pane-active-border-fg white
set -g pane-active-border-fg colour39
set -g pane-active-border-bg yellow
# END:panecolors

# Command / message line
# START:cmdlinecolors
#set -g message-fg white
#set -g message-bg black
#set -g message-attr bright
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold
# END:cmdlinecolors

# Status line left side
# START:statusleft
#set -g status-left-length 40
#set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
set -g status-left-length 52
set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'
set -g window-status-format "#[fg=white,bg=colour234] #I #W "
set -g window-status-current-format "#[fg=colour234,bg=colour39]⮀#[fg=colour25,bg=colour39,noreverse,bold] #I ⮁ #W #[fg=colour39,bg=colour234,nobold]⮀"
# END:statusleft

# Status line right side
# 15% | 28 Nov 18:15
# START: statusright
set -g status-right-length 451
set -g status-right "⮃ #(battery Discharging) ⮃ #[fg=cyan]%d %b %R"
# END:statusright

# Update the status bar every sixty seconds
# START:updateinterval
set -g status-interval 60
# END:updateinterval

# Center the window list
# START:centerwindowlist
set -g status-justify centre
# END:centerwindowlist

# Open panes in the same directory using the tmux-panes script
# START:tmuxpanes
unbind v
unbind n
bind v send-keys " tmux-panes -h" C-m
bind n send-keys " tmux-panes -v" C-m
# END:tmuxpanes

# Maximize and restore a pane
# START:max
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
# END:max
# START:restore
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp
# END:restore

# Log output to a text file on demand
# START:pipe-pane
bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"
# END:pipe-pane
