# TODO can this be aliased well?
# heroku git:remote -a {heroku repo name} -r {local remote name}
[user]
  name = Greg Vaughn
  # prefer to keep email in individual repos' config
  # Use GIT_AUTHOR_EMAIL env var to override
[push]
  default = tracking
[alias]
  mebo = "!f() { git config user.name "Greg Vaughn"; git config user.email gvaughn@bonobos.com; git commit --amend --reset-author; } ; f"
  mep = "!f() { git config user.name "Greg Vaughn"; git config user.email gvaughn@gmail.com; git commit --amend --reset-author; } ; f"
  copr = "!f() { git fetch -fu origin refs/pull/$1/head:pr-$1; git checkout pr-$1; } ; f"
  prunepr = "!git for-each-ref refs/heads/pr-* --format='%(refname:short)' | while read ref ; do git branch -D $ref ; done"
  la = "!git config -l | grep alias | cut -c 7-"
  up = add -u
  hist = log  --pretty=format:'%Cred%h%Creset %C(yellow)%ad%Creset | %s%Cgreen%d %Cblue[%an]%Creset' --graph --date=short
  mhist = log  --pretty=format:'%Cred%h%Creset %C(yellow)%ad%Creset | %s%Cgreen%d %Cblue[%an]%Creset' --graph --date=short --author greg.vaughn
  g = log --oneline --all --graph --decorate --color
  ll = log ORIG_HEAD..HEAD --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  churn = "!f() { git log --name-only --no-merges | grep \\.rb$ | grep -v ^vendor | sort | uniq -c | sort -nr | head -50; }; f"
  so = commit -v --amend --signoff
  peek = show --name-only
  changed = !git log --pretty="format:" --name-only head ORIG_HEAD..HEAD | sort | uniq
  yamldelta = !git log --pretty="format:" --name-only head $LASTHEAD..$CURHEAD | sort | uniq | grep ".*locales/deals.*yml"
  headsha = rev-parse head
  amend = !git commit --amend -C HEAD --date \"`date`\"
  co = checkout
  br = branch
  ci = commit
  st = status
  cl = checkout @{-1} # checkout last branch
  spull = !git stash && git pull && git stash pop
  bdiff = !git diff `git merge-base HEAD origin/master` #diff of branch back to branch point
  diff = diff --word-diff
  unstage = reset HEAD --
  last = log -1 HEAD
  sync = "!f() { echo syncing with master && git checkout master && git pull && git checkout - && git rebase master; }; f"
  #pruneall = "!f() { git remote | xargs -n 1 git remote prune; }; f"
  pruneorigin = !git checkout master && git branch -r --merged | grep -v master | sed -e 's/origin\\//:/' | xargs git push origin
  prunelocal = !git checkout master && git branch --merged | grep -v master | xargs git branch -d
  rtree = ls-tree -r -t master^{tree}
  ctags = !.git/hooks/ctags
  fixup = "!f() { git commit --amend -C HEAD --date \"`date`\"; }; f"
  mru = "!f() { git for-each-ref --format='%(authordate:relative)%09%(refname:short)%0a%(subject)%0a' --sort=-committerdate refs/heads | head -20; }; f"
       #newpr= "!f() { open http://svn.livingsocial.com/$(git config --get github.user)/deals/pull/new/$(git symbolic-ref head | sed -e 's/.*\///g'); }; f"
  mybranches = "!f() { if test $# = 0 ; then set -- refs/remotes ; fi ; git for-each-ref --format='%(authordate:relative)\t%(refname:short)\t%(authoremail)' --sort=authordate \"$@\" | sed -ne \"s/\t<$(git config user.email)>//p\" | column -s '\t' -t ; } ; f"
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[core]
  editor = /usr/bin/vim
  excludesfile = ~/.gitignore_global
[rerere]
  enabled = true
[branch]
  autosetuprebase = always
[hub]
  host = code.livingsocial.net
[credential]
	helper = osxkeychain
[init]
	templatedir = ~/dotfiles/git_template
[diff]
	algorithm = patience
[mergetool]
	keepBackup = false
[merge]
        tool = opendiff
[help]
	autocorrect = 1
